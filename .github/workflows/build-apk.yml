name: Build APK

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Update manifest.yaml to target API 34
        run: |
          sed -i 's/target_sdk_version: 33/target_sdk_version: 34/' manifest.yaml

      - name: Install LLVM
        run: sudo apt-get update && sudo apt-get install -y llvm

      - name: Download Android NDK r28 # Xbuild does this automatically, but at the moment it does not yet support NDK r28, and we need it for 16 KB ELF alignment.
        run: |
          curl -o android-ndk-r28-linux.zip https://dl.google.com/android/repository/android-ndk-r28-linux.zip
          unzip android-ndk-r28-linux.zip
          rm android-ndk-r28-linux.zip

      - name: Prepare Android.ndk # Replicate these steps from Xbuild's release workflow, so a fully compatible Android.ndk folder with NDK r28 is available offline in the working directory where Xbuild proceeds.
        run: |
          TOOLCHAIN=android-ndk-r28/toolchains/llvm/prebuilt/linux-x86_64
          CLANG_VERSION=$(ls $TOOLCHAIN/lib/clang | head -n 1)
          CLANG=$TOOLCHAIN/lib/clang/$CLANG_VERSION

          mkdir Android.ndk
          cp -r $TOOLCHAIN/sysroot/usr Android.ndk/
          cp -r $CLANG/lib/linux/aarch64/* Android.ndk/usr/lib/aarch64-linux-android/
          cp -r $CLANG/lib/linux/arm/* Android.ndk/usr/lib/arm-linux-androideabi/
          cp -r $CLANG/lib/linux/x86_64/* Android.ndk/usr/lib/x86_64-linux-android/
          cp -r $CLANG/lib/linux/i386/* Android.ndk/usr/lib/i686-linux-android/

          echo "INPUT(-lunwind)" > Android.ndk/usr/lib/aarch64-linux-android/libgcc.a
          echo "INPUT(-lunwind)" > Android.ndk/usr/lib/arm-linux-androideabi/libgcc.a
          echo "INPUT(-lunwind)" > Android.ndk/usr/lib/x86_64-linux-android/libgcc.a
          echo "INPUT(-lunwind)" > Android.ndk/usr/lib/i686-linux-android/libgcc.a

          mkdir -p ~/.cache/x/
          mv Android.ndk ~/.cache/x/

      - name: Build xbuild
        working-directory: patches/xbuild
        run: cargo install --path xbuild

      - name: Build APK
        run: x build --release --platform=android --arch=arm64

      - name: Extract version
        id: extract_version
        run: echo "version=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version')" >> "$GITHUB_OUTPUT"

      - name: Rename APK with version
        run: |
          mv target/x/release/android/polar-bear.apk target/x/release/android/polar-bear-${{ steps.extract_version.outputs.version }}.apk

      - name: Create GitHub Release
        if: github.ref_type == 'tag'
        uses: softprops/action-gh-release@v2
        with:
          name: Polar Bear v${{ steps.extract_version.outputs.version }}
          tag_name: v${{ steps.extract_version.outputs.version }}
          files: target/x/release/android/polar-bear-${{ steps.extract_version.outputs.version }}.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
